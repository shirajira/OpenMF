//------------------------------------------------------------------------------------------------------//
//
//                                          License Agreement
//                                     For Open Source SMAF Library
//
//                         Copyright (c) 2015-2017, @shirajira, all rights reserved.
//
//------------------------------------------------------------------------------------------------------//

#include "array_operations.h"
#include <string>

using namespace smaf;

//------------------------------------------------------------------------------------------------------//
// Check Chunk ID
//------------------------------------------------------------------------------------------------------//
bool smaf::check_chunk(const char* szChunkID_, const u8_t* p_)
{
	const u32_t len = static_cast<u32_t>(std::strlen(szChunkID_));
	for (u32_t i = 0; i < len; i++)
	{
		if (szChunkID_[i] == '*') continue;						// '*' = No Care
		if (szChunkID_[i] != p_[i]) return false;
	}
	return true;
}

//------------------------------------------------------------------------------------------------------//
// Calculate Data Size
//------------------------------------------------------------------------------------------------------//
u32_t smaf::calc_size(const u8_t* p_, u32_t len_)
{
	u32_t size = 0;
	const u32_t end = len_;
	for (u32_t i = 0; i < end; i++)
	{
		size += (p_[i] << (8 * --len_));
	}
	return size;
}

//------------------------------------------------------------------------------------------------------//
// Calculate Variable Data Size
//------------------------------------------------------------------------------------------------------//
u32_t smaf::calc_variable_size(const u8_t* p_, u32_t& rLen_)
{
	u32_t size = 0;
	rLen_ = 0;
	for (u32_t i = 0; i < 4; i++)
	{
		rLen_++;
		size <<= 7;
		if ((p_[i] & 0x80) == 0x80)
		{
			size += (p_[i] & 0x7F);
		}
		else
		{
			size += (p_[i] & 0x7F);
			break;
		}
	}
	return size;
}

//------------------------------------------------------------------------------------------------------//
// Make Data Size Array
//------------------------------------------------------------------------------------------------------//
void smaf::make_size_array(u32_t size_, u32_t len_, u8_t* p_)
{
	const u32_t end = len_;
	for (u32_t i = 0; i < end; i++)
	{
		p_[i] = ((size_ >> (8 * --len_)) & 0xFF);
	}
}

//------------------------------------------------------------------------------------------------------//
// Make Variable Data Size
//------------------------------------------------------------------------------------------------------//
void smaf::make_variable_size_array(u32_t size_, u8_t* p_, u32_t& rLen_)
{
	if (size_ <= 0x7F)
	{
		rLen_ = 1;
		p_[0] = (size_ & 0x7F);
	}
	else if (size_ <= 0x3FFF)
	{
		rLen_ = 2;
		p_[0] = (((size_ >> 7) & 0x7F) | 0x80);
		p_[1] = (size_ & 0x7F);
	}
	else if (size_ <= 0x1FFFFF)
	{
		rLen_ = 3;
		p_[0] = (((size_ >> 14) & 0x7F) | 0x80);
		p_[1] = (((size_ >>  7) & 0x7F) | 0x80);
		p_[2] = (size_ & 0x7F);
	}
	else if (size_ <= 0xFFFFFFF)
	{
		rLen_ = 4;
		p_[0] = (((size_ >> 21) & 0x7F) | 0x80);
		p_[1] = (((size_ >> 14) & 0x7F) | 0x80);
		p_[2] = (((size_ >>  7) & 0x7F) | 0x80);
		p_[3] = (size_ & 0x7F);
	}
	else
	{
		rLen_ = 0;
	}
}

//------------------------------------------------------------------------------------------------------//
// End of File
//------------------------------------------------------------------------------------------------------//
