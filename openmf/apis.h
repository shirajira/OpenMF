//------------------------------------------------------------------------------------------------------//
//
//                                          License Agreement
//                                     For Open Source SMAF Library
//
//                         Copyright (c) 2015-2017, @shirajira, all rights reserved.
//
//------------------------------------------------------------------------------------------------------//

#ifndef openmf_apis_h__
#define openmf_apis_h__
#pragma once

#include "core.h"

namespace smaf {

//------------------------------------------------------------------------------------------------------//
// Sequence Status (enum)
//------------------------------------------------------------------------------------------------------//
enum sequence_state
{
	SS_DURATION = 0,											// Duration
	SS_STATUS,													// Status
	SS_GATETIME,												// Gatetime
	SS_EOS														// End of Sequence
};

//------------------------------------------------------------------------------------------------------//
// Sequence Event (enum)
//------------------------------------------------------------------------------------------------------//
enum sequence_event
{
	SE_NOTE_NOVELOCITY  = 0x80,									// Note Message (without Velocity)
	SE_NOTE_VELOCITY    = 0x90,									// Note Message (with Velocity)
	SE_RESERVED_3BYTE   = 0xA0,									// Reserved (3byte)
	SE_CONTROL_CHANGE   = 0xB0,									// Control Change
	SE_PROGRAM_CHANGE   = 0xC0,									// Program Change
	SE_RESERVED_2BYTE   = 0xD0,									// Reserved (2byte)
	SE_PITCH_BEND       = 0xE0,									// Pitch Bend
	SE_SYSTEM_EXCLUSIVE = 0xF0,									// System Exclusive
	SE_EOS_NOP          = 0xFF									// EOS or NOP
};

//------------------------------------------------------------------------------------------------------//
// Load Binary Data from File
//------------------------------------------------------------------------------------------------------//
bool load(const char* szFile, binary_array& rDst_);

//------------------------------------------------------------------------------------------------------//
// Save Binary Data to File
//------------------------------------------------------------------------------------------------------//
bool save(const char* szFile, const binary_array& rSrc_);

//------------------------------------------------------------------------------------------------------//
// Fix CRC16 Code
//------------------------------------------------------------------------------------------------------//
bool fix_crc16(MA_3& rSrcDst_);

//------------------------------------------------------------------------------------------------------//
// Remove NOP (for Smooth Loop)
//------------------------------------------------------------------------------------------------------//
bool remove_nop(MA_3& rSrcDst_);

//------------------------------------------------------------------------------------------------------//
// Clear Channel Status
//------------------------------------------------------------------------------------------------------//
bool clear_channel_status(MA_3& rSrcDst_);

//------------------------------------------------------------------------------------------------------//
// Change Channel Status
//------------------------------------------------------------------------------------------------------//
bool change_channel_status(MA_3& rSrcDst_, u32_t ch_, const channel_status& rStatus_);

//------------------------------------------------------------------------------------------------------//
// Change Timebase
//------------------------------------------------------------------------------------------------------//
bool change_timebase(MA_3& rSrcDst_, const timebase& rNewTimebase_);

//------------------------------------------------------------------------------------------------------//
// Change Tempo
//------------------------------------------------------------------------------------------------------//
bool change_tempo(const MA_3& rSrc_, const timebase& rNewTimebase_, f64_t ratio_, MA_3& rDst_);

//------------------------------------------------------------------------------------------------------//
// Combine SMAF Data
//------------------------------------------------------------------------------------------------------//
bool combine(const MA_3& rSrc1_, const MA_3& rSrc2_, MA_3& rDst_, u32_t gap_ = 1);

//------------------------------------------------------------------------------------------------------//
}																// namespace smaf

#endif															// openmf_core_h__
//------------------------------------------------------------------------------------------------------//
// End of File
//------------------------------------------------------------------------------------------------------//
